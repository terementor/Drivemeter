package com.github.terementor.drivemeter.io;

import android.os.Environment;
import android.util.Log;

import com.github.terementor.drivemeter.net.ObdReading;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Map;

public class LogCSVWriter {

    private static final String TAG = LogCSVWriter.class.getName();
    private static final String HEADER_CSV = "This is a logfile generated by terementor.drivemeter";
    private static final String[] NAMES_COLUMNS = {"TIME", "LATITUDE", "LONGITUDE", "ALTITUDE", "VEHICLE_ID",
            "BAROMETRIC_PRESSURE", "ENGINE_COOLANT_TEMP", "FUEL_LEVEL", "ENGINE_LOAD", "AMBIENT_AIR_TEMP",
            "ENGINE_RPM", "INTAKE_MANIFOLD_PRESSURE", "MAF", "Term Fuel Trim Bank 1",
            "FUEL_ECONOMY", "Long Term Fuel Trim Bank 2", "FUEL_TYPE", "AIR_INTAKE_TEMP",
            "FUEL_PRESSURE", "SPEED", "Short Term Fuel Trim Bank 2",
            "Short Term Fuel Trim Bank 1", "ENGINE_RUNTIME", "THROTTLE_POS", "DTC_NUMBER",
            "TROUBLE_CODES", "TIMING_ADVANCE", "EQUIV_RATIO"};
    private static final String[] SENSOR_COlUMNS = {"time", "x", "y", "z"};
    private static final String[] GPS_COlUMNS = {"time", "lat", "lon", "alt"};
    private static final String[] OBD_COLUMNS = {"time", "speed", "rpm"};
    private static final String[] DETAILS_COLUMNS = {"Name", "Vendor", "Type", "Resolution", "MinDelay", "MaxDelay"};
    private static final String[] NAMES_COLUMNS_ONLY_READINGS = {
            "BAROMETRIC_PRESSURE", "ENGINE_COOLANT_TEMP", "FUEL_LEVEL", "ENGINE_LOAD", "AMBIENT_AIR_TEMP",
            "ENGINE_RPM", "INTAKE_MANIFOLD_PRESSURE", "MAF", "Term Fuel Trim Bank 1",
            "FUEL_ECONOMY", "Long Term Fuel Trim Bank 2", "FUEL_TYPE", "AIR_INTAKE_TEMP",
            "FUEL_PRESSURE", "SPEED", "Short Term Fuel Trim Bank 2",
            "Short Term Fuel Trim Bank 1", "ENGINE_RUNTIME", "THROTTLE_POS", "DTC_NUMBER",
            "TROUBLE_CODES", "TIMING_ADVANCE", "EQUIV_RATIO"};
    private boolean isFirstLine;
    private BufferedWriter buf;

    public LogCSVWriter(String filename, String dirname) throws FileNotFoundException, RuntimeException {
        try {
            String crl;
            File sdCard = Environment.getExternalStorageDirectory();
            File dir = new File(sdCard.getAbsolutePath() + File.separator + dirname);
            if (!dir.exists()) dir.mkdirs();
            Log.d(TAG, "Path is " + sdCard.getAbsolutePath() + File.separator + dirname);
            File file = new File(dir, filename);
            FileOutputStream fos = new FileOutputStream(file);
            OutputStreamWriter osw = new OutputStreamWriter(fos);
            this.buf = new BufferedWriter(osw);
            this.isFirstLine = true;


            addLine(HEADER_CSV);

            //Decide which columens have to be use for the created csv file
            String[] columns = null;
            if (filename.contains("gyro") || filename.contains("acc") || filename.contains("mag") || filename.contains("rot")) {
                columns = SENSOR_COlUMNS;
            } else if (filename.contains("details")) {
                columns = DETAILS_COLUMNS;
            } else if (filename.contains("obd")) {
                columns = OBD_COLUMNS;
            } else if (filename.contains("gps")) {
                columns = GPS_COlUMNS;
            }

            // Add line with the columns
            crl = "";
            for (String ccln : columns) {
                crl += ccln + ";";
            }
            addLine(crl.substring(0, crl.length() - 1)); // remove last ";"
            Log.d(TAG, "Constructed CSVFile");
        } catch (Exception e) {
            Log.e(TAG, "LogCSVWriter constructor failed");
        }
    }

    public void closeLogCSVWriter() {
        try {
            buf.flush();
            buf.close();
            Log.d(TAG, "Flushed and closed");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void writeLineCSV(ObdReading reading) {
        String crl;

        if (isFirstLine) {
            crl = HEADER_CSV + reading.toString();
            addLine(crl);
            isFirstLine = false;

            // Add line with the columns
            crl = "";
            for (String ccln : NAMES_COLUMNS) {
                crl += ccln + ";";
            }
            addLine(crl.substring(0, crl.length() - 1)); // remove last ";"

        } else {

            crl = reading.getTimestamp() + ";" +
                    reading.getLatitude() + ";" +
                    reading.getLongitude() + ";" +
                    reading.getAltitude() + ";" +
                    reading.getVin() + ";";


            Map<String, String> read = reading.getReadings();

            for (String ccln : NAMES_COLUMNS_ONLY_READINGS) {
                crl += read.get(ccln) + ";";
            }

            addLine(crl.substring(0, crl.length() - 1));
        }
    }

    public void writestringLineCSV(String[] data) {
        String crl;

        if (false) {

            crl = HEADER_CSV;// + reading.toString();

            addLine(crl);
            isFirstLine = false;

            // Add line with the columns
            crl = "";
            for (String ccln : NAMES_COLUMNS) {
                crl += ccln + ";";
            }
            addLine(crl.substring(0, crl.length() - 1)); // remove last ";"

        } else {
            crl = "";
            //crl = .getTimestamp() + ";" +
            //        reading.getLatitude() + ";" +
            //        reading.getLongitude() + ";" +
            //        reading.getAltitude() + ";" +
            //crl = data[0] + data[2] + data[3] + data[4] + data[5] + data[6];
            for (String ccln : data) {
                crl += ccln + ";";
            }

            //Map<String, String> read = reading.getReadings();

            //for (String ccln : NAMES_COLUMNS_ONLY_READINGS) {
            //    crl += read.get(ccln) + ";";
            //}

            addLine(crl.substring(0, crl.length() - 1));
        }
    }

    private void addLine(String line) {
        if (line != null) {
            try {
                buf.write(line, 0, line.length());
                buf.newLine();
                Log.d(TAG, "LogCSVWriter: Wrote" + line);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
